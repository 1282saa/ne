{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from \"axios\";\nimport { BIGKINDS_KEY } from \"@env\";\nvar BASE_URL = \"https://tools.kinds.or.kr\";\nexport var bigKindsAPI = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  }\n});\nexport var SEOUL_ECONOMY_CODE = \"02100311\";\nexport var PROVIDER_CODES = {\n  \"01100101\": \"경향신문\",\n  \"01100201\": \"국민일보\",\n  \"01100301\": \"내일신문\",\n  \"01100401\": \"동아일보\",\n  \"01100501\": \"문화일보\",\n  \"01100611\": \"서울신문\",\n  \"01100701\": \"세계일보\",\n  \"01100751\": \"아시아투데이\",\n  \"01100801\": \"조선일보\",\n  \"01100901\": \"중앙일보\",\n  \"01101001\": \"한겨레\",\n  \"01101101\": \"한국일보\",\n  \"01200101\": \"경기일보\",\n  \"01200201\": \"경인일보\",\n  \"01300201\": \"강원일보\",\n  \"01400201\": \"대전일보\",\n  \"01500501\": \"대구일보\",\n  \"01500601\": \"매일신문\",\n  \"01500701\": \"부산일보\",\n  \"01501001\": \"대구신문\",\n  \"01600451\": \"남도일보\",\n  \"01600801\": \"전남일보\",\n  \"01600901\": \"전라일보\",\n  \"02100051\": \"대한경제\",\n  \"02100101\": \"매일경제\",\n  \"02100201\": \"머니투데이\",\n  \"02100311\": \"서울경제\",\n  \"02100351\": \"이투데이\",\n  \"02100401\": \"메트로경제\",\n  \"02100501\": \"파이낸셜뉴스\",\n  \"02100601\": \"한국경제\",\n  \"02100701\": \"헤럴드경제\",\n  \"02100801\": \"아시아경제\",\n  \"02100851\": \"아주경제\",\n  \"04100058\": \"노컷뉴스\",\n  \"04100078\": \"뉴스핌\",\n  \"04100158\": \"데일리안\",\n  \"04101008\": \"이데일리\",\n  \"04102008\": \"쿠키뉴스\",\n  \"04104008\": \"프레시안\",\n  \"06101202\": \"주간한국\",\n  \"07100501\": \"전자신문\",\n  \"07100502\": \"환경일보\",\n  \"07101201\": \"디지털타임스\",\n  \"08100101\": \"KBS\",\n  \"08100201\": \"MBC\",\n  \"08100301\": \"SBS\",\n  \"08100401\": \"YTN\",\n  \"08200101\": \"OBS\",\n  \"10100101\": \"스포츠서울\",\n  \"10100301\": \"스포츠한국\",\n  \"10100401\": \"스포츠월드\"\n};\nbigKindsAPI.interceptors.request.use(function (config) {\n  if (config.data && !config.data.access_key) {\n    config.data = {\n      access_key: BIGKINDS_KEY,\n      argument: config.data.argument || config.data\n    };\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\nexport var searchNewsByKeyword = function () {\n  var _ref = _asyncToGenerator(function* (keyword) {\n    var days = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n    try {\n      var today = new Date();\n      var fromDate = new Date();\n      fromDate.setDate(today.getDate() - days);\n      var fromDateStr = formatDateForAPI(fromDate);\n      var toDateStr = formatDateForAPI(today);\n      var response = yield bigKindsAPI.post(\"/search/news\", {\n        argument: {\n          query: keyword,\n          published_at: {\n            from: fromDateStr,\n            until: toDateStr\n          },\n          provider: [SEOUL_ECONOMY_CODE],\n          sort: {\n            date: \"desc\"\n          },\n          return_from: 0,\n          return_size: 20,\n          fields: [\"title\", \"content\", \"published_at\", \"provider_news_id\", \"images\", \"provider_link_page\", \"provider\"]\n        }\n      });\n      if (response.data && response.data.documents) {\n        return response.data.documents.map(function (item) {\n          return {\n            id: item.news_id || item._id,\n            title: item.title,\n            description: item.content ? item.content.substring(0, 150) + \"...\" : \"\",\n            date: formatReadableDate(item.published_at),\n            url: item.provider_link_page,\n            imageUrl: item.images && item.images.length > 0 ? item.images[0] : null,\n            source: \"서울경제\"\n          };\n        });\n      }\n      return [];\n    } catch (error) {\n      console.error(\"뉴스 검색 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function searchNewsByKeyword(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getNewsDetail = function () {\n  var _ref2 = _asyncToGenerator(function* (newsId) {\n    try {\n      var response = yield bigKindsAPI.post(\"/search/news\", {\n        argument: {\n          news_ids: [newsId],\n          fields: [\"title\", \"content\", \"published_at\", \"provider\", \"byline\", \"category\", \"images\", \"provider_link_page\"]\n        }\n      });\n      if (response.data && response.data.return_object && response.data.return_object.documents && response.data.return_object.documents.length > 0) {\n        var detail = response.data.return_object.documents[0];\n        return {\n          id: newsId,\n          title: detail.title,\n          content: detail.content,\n          date: formatReadableDate(detail.published_at),\n          url: detail.provider_link_page,\n          imageUrl: detail.images && detail.images.length > 0 ? detail.images[0] : null,\n          source: detail.provider || \"서울경제\",\n          author: detail.byline || \"\",\n          category: detail.category || []\n        };\n      }\n      throw new Error(\"뉴스 상세 정보를 찾을 수 없습니다.\");\n    } catch (error) {\n      console.error(\"뉴스 상세 정보 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getNewsDetail(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getTodayIssues = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    var dateStr = arguments.length > 1 ? arguments[1] : undefined;\n    try {\n      var targetDate;\n      if (dateStr) {\n        targetDate = dateStr;\n      } else {\n        var today = new Date();\n        targetDate = formatDateForAPI(today, false);\n      }\n      console.log(`오늘의 이슈 API 호출: ${targetDate}`);\n      var response = yield bigKindsAPI.post(\"/issue_ranking\", {\n        argument: {\n          date: targetDate,\n          provider: [\"서울경제\"]\n        }\n      });\n      console.log(\"API 응답:\", JSON.stringify(response.data, null, 2));\n      if (!response.data.return_object || !response.data.return_object.topics || response.data.return_object.topics.length === 0) {\n        console.log(`${targetDate} 이슈 없음`);\n        return [];\n      }\n      var issues = response.data.return_object.topics.map(function (issue, index) {\n        return {\n          id: `issue-${index}-${targetDate}`,\n          topic: issue.topic,\n          topicRank: issue.topic_rank,\n          keywords: issue.topic_keyword ? issue.topic_keyword.split(\",\") : [],\n          content: issue.topic_content || \"\",\n          newsClusterIds: issue.news_cluster || []\n        };\n      });\n      return issues.slice(0, size);\n    } catch (error) {\n      console.error(\"오늘의 이슈 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getTodayIssues() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getPopularKeywords = function () {\n  var _ref4 = _asyncToGenerator(function* () {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    try {\n      var today = new Date();\n      var yesterday = new Date(today);\n      yesterday.setDate(today.getDate() - 1);\n      var response = yield bigKindsAPI.post(\"/query_rank\", {\n        argument: {\n          from: formatDateForAPI(yesterday),\n          until: formatDateForAPI(today),\n          offset: size\n        }\n      });\n      if (response.data.return_object && response.data.return_object.queries) {\n        return response.data.return_object.queries.sort(function (a, b) {\n          return b.count - a.count;\n        }).slice(0, size).map(function (item) {\n          return item.query;\n        });\n      }\n      return [];\n    } catch (error) {\n      console.error(\"인기 검색어 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getPopularKeywords() {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getRelatedKeywords = function () {\n  var _ref5 = _asyncToGenerator(function* (keyword) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    try {\n      var today = new Date();\n      var lastMonth = new Date(today);\n      lastMonth.setMonth(today.getMonth() - 1);\n      var response = yield bigKindsAPI.post(\"/word_cloud\", {\n        argument: {\n          query: keyword,\n          published_at: {\n            from: formatDateForAPI(lastMonth),\n            until: formatDateForAPI(today)\n          },\n          provider: [SEOUL_ECONOMY_CODE]\n        }\n      });\n      if (response.data.return_object && response.data.return_object.nodes) {\n        return response.data.return_object.nodes.sort(function (a, b) {\n          return b.weight - a.weight;\n        }).slice(0, size).map(function (node) {\n          return {\n            name: node.name,\n            weight: node.weight\n          };\n        });\n      }\n      return [];\n    } catch (error) {\n      console.error(\"연관어 분석 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getRelatedKeywords(_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getKeywordTimeline = function () {\n  var _ref6 = _asyncToGenerator(function* (keyword) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n    try {\n      var newsItems = yield searchNewsByKeyword(keyword, 30);\n      return newsItems.sort(function (a, b) {\n        return new Date(b.date).getTime() - new Date(a.date).getTime();\n      }).slice(0, size);\n    } catch (error) {\n      console.error(\"키워드 타임라인 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getKeywordTimeline(_x4) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var getTodayKeywords = function () {\n  var _ref7 = _asyncToGenerator(function* () {\n    try {\n      var response = yield bigKindsAPI.post(\"/today_category_keyword\", {\n        argument: {}\n      });\n      if (response.data && response.data.return_object) {\n        return {\n          date: response.data.return_object.date,\n          categories: response.data.return_object.cate_ratio || [],\n          keywords: response.data.return_object.cate_keyword || []\n        };\n      }\n      return {\n        date: \"\",\n        categories: [],\n        keywords: []\n      };\n    } catch (error) {\n      console.error(\"오늘의 키워드 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getTodayKeywords() {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var getKeywordTrend = function () {\n  var _ref8 = _asyncToGenerator(function* (keyword) {\n    var interval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"month\";\n    var fromDate = arguments.length > 2 ? arguments[2] : undefined;\n    var toDate = arguments.length > 3 ? arguments[3] : undefined;\n    try {\n      var endDate = toDate || new Date();\n      var startDate = fromDate || new Date(endDate);\n      if (!fromDate) {\n        startDate.setFullYear(startDate.getFullYear() - 1);\n      }\n      var response = yield bigKindsAPI.post(\"/time_line\", {\n        argument: {\n          query: keyword,\n          published_at: {\n            from: formatDateForAPI(startDate),\n            until: formatDateForAPI(endDate)\n          },\n          provider: [SEOUL_ECONOMY_CODE],\n          interval: interval,\n          normalize: \"false\"\n        }\n      });\n      if (response.data && response.data.return_object) {\n        return {\n          totalHits: response.data.return_object.total_hits,\n          timeline: response.data.return_object.time_line || []\n        };\n      }\n      return {\n        totalHits: 0,\n        timeline: []\n      };\n    } catch (error) {\n      console.error(\"키워드 트렌드 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getKeywordTrend(_x5) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var formatDateForAPI = function formatDateForAPI(date) {\n  var asYYYYMMDD = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var year = date.getFullYear();\n  var month = String(date.getMonth() + 1).padStart(2, \"0\");\n  var day = String(date.getDate()).padStart(2, \"0\");\n  if (asYYYYMMDD) {\n    return `${year}${month}${day}`;\n  }\n  return `${year}-${month}-${day}`;\n};\nexport var formatReadableDate = function formatReadableDate(dateString) {\n  if (!dateString) return \"\";\n  var date;\n  if (dateString.match(/^\\d{8}$/)) {\n    var _year = dateString.substring(0, 4);\n    var _month = dateString.substring(4, 6);\n    var _day = dateString.substring(6, 8);\n    date = new Date(`${_year}-${_month}-${_day}`);\n  } else {\n    date = new Date(dateString);\n  }\n  if (isNaN(date.getTime())) {\n    return dateString;\n  }\n  var year = date.getFullYear();\n  var month = String(date.getMonth() + 1).padStart(2, \"0\");\n  var day = String(date.getDate()).padStart(2, \"0\");\n  return `${year}-${month}-${day}`;\n};\nvar fetchNewsWithClusterIds = function () {\n  var _ref9 = _asyncToGenerator(function* (clusterIds) {\n    var _response$data, _response$data$return;\n    var response = yield bigKindsAPI.post(\"/search/news\", {\n      argument: {\n        news_ids: clusterIds,\n        fields: [\"news_id\", \"title\", \"content\", \"provider\", \"published_at\"]\n      }\n    });\n    return ((_response$data = response.data) == null ? void 0 : (_response$data$return = _response$data.return_object) == null ? void 0 : _response$data$return.docs) || [];\n  });\n  return function fetchNewsWithClusterIds(_x6) {\n    return _ref9.apply(this, arguments);\n  };\n}();\nexport var getProviderFromNewsId = function getProviderFromNewsId(newsId) {\n  var providerCode = newsId.split(\".\")[0];\n  return PROVIDER_CODES[providerCode] || `언론사코드(${providerCode})`;\n};\nexport var isSeoulEconomic = function isSeoulEconomic(newsId) {\n  return newsId.startsWith(\"02100311\");\n};\nexport var generateBigkindsUrl = function generateBigkindsUrl(newsId) {\n  var baseUrl = \"https://www.bigkinds.or.kr/v2/news/newsDetailView.do?newsId=\";\n  return `${baseUrl}${newsId}`;\n};\nexport var getNewsDetailsByIds = function () {\n  var _ref10 = _asyncToGenerator(function* (newsIds) {\n    try {\n      if (!newsIds || newsIds.length === 0) {\n        return [];\n      }\n      var response = yield bigKindsAPI.post(\"/search/news\", {\n        argument: {\n          news_ids: newsIds,\n          fields: [\"title\", \"content\", \"published_at\", \"provider\", \"news_id\", \"provider_link_page\", \"images\"]\n        }\n      });\n      if (response.data && response.data.return_object && response.data.return_object.docs) {\n        return response.data.return_object.docs.map(function (item) {\n          return {\n            id: item.news_id,\n            title: item.title,\n            content: item.content ? item.content.substring(0, 150) + \"...\" : \"\",\n            date: formatReadableDate(item.published_at),\n            url: item.provider_link_page || generateBigkindsUrl(item.news_id),\n            imageUrl: item.images && item.images.length > 0 ? item.images[0] : null,\n            provider: getProviderFromNewsId(item.news_id),\n            providerCode: item.news_id.split(\".\")[0],\n            fullContent: item.content\n          };\n        });\n      }\n      return [];\n    } catch (error) {\n      console.error(\"뉴스 상세 정보 조회 중 오류 발생:\", error);\n      return [];\n    }\n  });\n  return function getNewsDetailsByIds(_x7) {\n    return _ref10.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["axios","BIGKINDS_KEY","BASE_URL","bigKindsAPI","create","baseURL","headers","Accept","SEOUL_ECONOMY_CODE","PROVIDER_CODES","interceptors","request","use","config","data","access_key","argument","error","Promise","reject","searchNewsByKeyword","_ref","_asyncToGenerator","keyword","days","arguments","length","undefined","today","Date","fromDate","setDate","getDate","fromDateStr","formatDateForAPI","toDateStr","response","post","query","published_at","from","until","provider","sort","date","return_from","return_size","fields","documents","map","item","id","news_id","_id","title","description","content","substring","formatReadableDate","url","provider_link_page","imageUrl","images","source","console","_x","apply","getNewsDetail","_ref2","newsId","news_ids","return_object","detail","author","byline","category","Error","_x2","getTodayIssues","_ref3","size","dateStr","targetDate","log","JSON","stringify","topics","issues","issue","index","topic","topicRank","topic_rank","keywords","topic_keyword","split","topic_content","newsClusterIds","news_cluster","slice","getPopularKeywords","_ref4","yesterday","offset","queries","a","b","count","getRelatedKeywords","_ref5","lastMonth","setMonth","getMonth","nodes","weight","node","name","_x3","getKeywordTimeline","_ref6","newsItems","getTime","_x4","getTodayKeywords","_ref7","categories","cate_ratio","cate_keyword","getKeywordTrend","_ref8","interval","toDate","endDate","startDate","setFullYear","getFullYear","normalize","totalHits","total_hits","timeline","time_line","_x5","asYYYYMMDD","year","month","String","padStart","day","dateString","match","isNaN","fetchNewsWithClusterIds","_ref9","clusterIds","_response$data","_response$data$return","docs","_x6","getProviderFromNewsId","providerCode","isSeoulEconomic","startsWith","generateBigkindsUrl","baseUrl","getNewsDetailsByIds","_ref10","newsIds","fullContent","_x7"],"sources":["/Users/yeong-gwang/Desktop/배움 오전 1.38.42/work/서울경제신문/개발작업/스토리in서경/src/services/newsService.ts"],"sourcesContent":["import axios from \"axios\";\nimport { BIGKINDS_KEY } from \"@env\";\n\n// BigKinds API 기본 URL\nconst BASE_URL = \"https://tools.kinds.or.kr\";\n\n// API 클라이언트 설정\nexport const bigKindsAPI = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  },\n});\n\n// 서울경제신문 언론사 코드\nexport const SEOUL_ECONOMY_CODE = \"02100311\";\n\n// 언론사 코드 매핑 추가\nexport const PROVIDER_CODES: Record<string, string> = {\n  \"01100101\": \"경향신문\",\n  \"01100201\": \"국민일보\",\n  \"01100301\": \"내일신문\",\n  \"01100401\": \"동아일보\",\n  \"01100501\": \"문화일보\",\n  \"01100611\": \"서울신문\",\n  \"01100701\": \"세계일보\",\n  \"01100751\": \"아시아투데이\",\n  \"01100801\": \"조선일보\",\n  \"01100901\": \"중앙일보\",\n  \"01101001\": \"한겨레\",\n  \"01101101\": \"한국일보\",\n  \"01200101\": \"경기일보\",\n  \"01200201\": \"경인일보\",\n  \"01300201\": \"강원일보\",\n  \"01400201\": \"대전일보\",\n  \"01500501\": \"대구일보\",\n  \"01500601\": \"매일신문\",\n  \"01500701\": \"부산일보\",\n  \"01501001\": \"대구신문\",\n  \"01600451\": \"남도일보\",\n  \"01600801\": \"전남일보\",\n  \"01600901\": \"전라일보\",\n  \"02100051\": \"대한경제\",\n  \"02100101\": \"매일경제\",\n  \"02100201\": \"머니투데이\",\n  \"02100311\": \"서울경제\", // 서울경제신문\n  \"02100351\": \"이투데이\",\n  \"02100401\": \"메트로경제\",\n  \"02100501\": \"파이낸셜뉴스\",\n  \"02100601\": \"한국경제\",\n  \"02100701\": \"헤럴드경제\",\n  \"02100801\": \"아시아경제\",\n  \"02100851\": \"아주경제\",\n  \"04100058\": \"노컷뉴스\",\n  \"04100078\": \"뉴스핌\",\n  \"04100158\": \"데일리안\",\n  \"04101008\": \"이데일리\",\n  \"04102008\": \"쿠키뉴스\",\n  \"04104008\": \"프레시안\",\n  \"06101202\": \"주간한국\",\n  \"07100501\": \"전자신문\",\n  \"07100502\": \"환경일보\",\n  \"07101201\": \"디지털타임스\",\n  \"08100101\": \"KBS\",\n  \"08100201\": \"MBC\",\n  \"08100301\": \"SBS\",\n  \"08100401\": \"YTN\",\n  \"08200101\": \"OBS\",\n  \"10100101\": \"스포츠서울\",\n  \"10100301\": \"스포츠한국\",\n  \"10100401\": \"스포츠월드\",\n};\n\n// 요청 인터셉터 설정 - API 키 추가\nbigKindsAPI.interceptors.request.use(\n  (config) => {\n    // 요청 구조에 access_key 추가\n    if (config.data && !config.data.access_key) {\n      config.data = {\n        access_key: BIGKINDS_KEY,\n        argument: config.data.argument || config.data,\n      };\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 뉴스 검색 결과 인터페이스\nexport interface NewsItem {\n  id: string;\n  title: string;\n  description: string;\n  date: string;\n  url: string;\n  imageUrl?: string;\n  source?: string;\n}\n\n// 뉴스 상세 정보 인터페이스\nexport interface NewsDetail {\n  id: string;\n  title: string;\n  content: string;\n  date: string;\n  url: string;\n  imageUrl?: string;\n  source?: string;\n  author?: string;\n  category?: string[];\n}\n\n// 새로운 인터페이스 추가\nexport interface IssueItem {\n  id: string; // 고유 식별자\n  topic: string; // 이슈 제목\n  topicRank: number; // 인기도\n  keywords: string[]; // 관련 키워드 (배열로 변환)\n  content: string; // 요약 내용\n  relatedNews?: NewsItem; // 관련 뉴스 (선택적)\n}\n\n/**\n * 키워드로 뉴스 검색\n * @param keyword 검색 키워드\n * @returns 뉴스 아이템 배열\n */\nexport const searchNewsByKeyword = async (\n  keyword: string,\n  days: number = 30\n): Promise<NewsItem[]> => {\n  try {\n    // 날짜 범위 계산\n    const today = new Date();\n    const fromDate = new Date();\n    fromDate.setDate(today.getDate() - days);\n\n    const fromDateStr = formatDateForAPI(fromDate);\n    const toDateStr = formatDateForAPI(today);\n\n    const response = await bigKindsAPI.post(\"/search/news\", {\n      argument: {\n        query: keyword,\n        published_at: {\n          from: fromDateStr,\n          until: toDateStr,\n        },\n        provider: [SEOUL_ECONOMY_CODE], // 서울경제 언론사만 검색\n        sort: { date: \"desc\" },\n        return_from: 0,\n        return_size: 20,\n        fields: [\n          \"title\",\n          \"content\",\n          \"published_at\",\n          \"provider_news_id\",\n          \"images\",\n          \"provider_link_page\",\n          \"provider\",\n        ],\n      },\n    });\n\n    // 응답 데이터 확인 및 매핑\n    if (response.data && response.data.documents) {\n      return response.data.documents.map((item: any) => ({\n        id: item.news_id || item._id,\n        title: item.title,\n        description: item.content ? item.content.substring(0, 150) + \"...\" : \"\",\n        date: formatReadableDate(item.published_at),\n        url: item.provider_link_page,\n        imageUrl: item.images && item.images.length > 0 ? item.images[0] : null,\n        source: \"서울경제\",\n      }));\n    }\n\n    return [];\n  } catch (error) {\n    console.error(\"뉴스 검색 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 뉴스 상세 정보 조회\n * @param newsId 뉴스 ID\n * @returns 뉴스 상세 정보\n */\nexport const getNewsDetail = async (newsId: string): Promise<NewsDetail> => {\n  try {\n    const response = await bigKindsAPI.post(\"/search/news\", {\n      argument: {\n        news_ids: [newsId],\n        fields: [\n          \"title\",\n          \"content\",\n          \"published_at\",\n          \"provider\",\n          \"byline\",\n          \"category\",\n          \"images\",\n          \"provider_link_page\",\n        ],\n      },\n    });\n\n    // 응답 구조가 다르므로 적절히 처리\n    if (\n      response.data &&\n      response.data.return_object &&\n      response.data.return_object.documents &&\n      response.data.return_object.documents.length > 0\n    ) {\n      const detail = response.data.return_object.documents[0];\n      return {\n        id: newsId,\n        title: detail.title,\n        content: detail.content,\n        date: formatReadableDate(detail.published_at),\n        url: detail.provider_link_page,\n        imageUrl:\n          detail.images && detail.images.length > 0 ? detail.images[0] : null,\n        source: detail.provider || \"서울경제\",\n        author: detail.byline || \"\",\n        category: detail.category || [],\n      };\n    }\n\n    throw new Error(\"뉴스 상세 정보를 찾을 수 없습니다.\");\n  } catch (error) {\n    console.error(\"뉴스 상세 정보 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 오늘의 이슈 뉴스 가져오기\n * @param size 가져올 이슈 수\n * @param dateStr 특정 날짜 (YYYY-MM-DD 형식, 기본값은 오늘)\n * @returns 뉴스 아이템 배열\n */\nexport const getTodayIssues = async (\n  size: number = 10,\n  dateStr?: string\n): Promise<IssueItem[]> => {\n  try {\n    // 날짜 설정 (지정된 날짜 또는 오늘)\n    let targetDate: string;\n\n    if (dateStr) {\n      targetDate = dateStr; // 이미 YYYY-MM-DD 형식\n    } else {\n      // 현재 날짜를 YYYY-MM-DD 형식으로 변환\n      const today = new Date();\n      targetDate = formatDateForAPI(today, false);\n    }\n\n    console.log(`오늘의 이슈 API 호출: ${targetDate}`);\n\n    // 오늘의 이슈 요청 - 서울경제 언론사 (코드가 아닌 이름으로 전달)\n    const response = await bigKindsAPI.post(\"/issue_ranking\", {\n      argument: {\n        date: targetDate,\n        provider: [\"서울경제\"],\n      },\n    });\n\n    console.log(\"API 응답:\", JSON.stringify(response.data, null, 2));\n\n    // 이슈가 있는지 확인\n    if (\n      !response.data.return_object ||\n      !response.data.return_object.topics ||\n      response.data.return_object.topics.length === 0\n    ) {\n      console.log(`${targetDate} 이슈 없음`);\n      return [];\n    }\n\n    // 각 이슈 데이터 변환\n    const issues = response.data.return_object.topics.map(\n      (issue: any, index: number) => {\n        return {\n          id: `issue-${index}-${targetDate}`,\n          topic: issue.topic,\n          topicRank: issue.topic_rank,\n          keywords: issue.topic_keyword ? issue.topic_keyword.split(\",\") : [],\n          content: issue.topic_content || \"\",\n          newsClusterIds: issue.news_cluster || [],\n        };\n      }\n    );\n\n    return issues.slice(0, size);\n  } catch (error) {\n    console.error(\"오늘의 이슈 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 인기 검색어 가져오기\n * @param size 가져올 검색어 수\n * @returns 인기 검색어 배열\n */\nexport const getPopularKeywords = async (\n  size: number = 10\n): Promise<string[]> => {\n  try {\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(today.getDate() - 1);\n\n    const response = await bigKindsAPI.post(\"/query_rank\", {\n      argument: {\n        from: formatDateForAPI(yesterday),\n        until: formatDateForAPI(today),\n        offset: size,\n      },\n    });\n\n    if (response.data.return_object && response.data.return_object.queries) {\n      return response.data.return_object.queries\n        .sort((a: any, b: any) => b.count - a.count)\n        .slice(0, size)\n        .map((item: any) => item.query);\n    }\n\n    return [];\n  } catch (error) {\n    console.error(\"인기 검색어 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 연관어 분석 가져오기\n * @param keyword 검색 키워드\n * @param size 가져올 연관어 수\n * @returns 연관어 배열 {name: string, weight: number}\n */\nexport const getRelatedKeywords = async (\n  keyword: string,\n  size: number = 10\n) => {\n  try {\n    const today = new Date();\n    const lastMonth = new Date(today);\n    lastMonth.setMonth(today.getMonth() - 1);\n\n    const response = await bigKindsAPI.post(\"/word_cloud\", {\n      argument: {\n        query: keyword,\n        published_at: {\n          from: formatDateForAPI(lastMonth),\n          until: formatDateForAPI(today),\n        },\n        provider: [SEOUL_ECONOMY_CODE],\n      },\n    });\n\n    if (response.data.return_object && response.data.return_object.nodes) {\n      return response.data.return_object.nodes\n        .sort((a: any, b: any) => b.weight - a.weight)\n        .slice(0, size)\n        .map((node: any) => ({\n          name: node.name,\n          weight: node.weight,\n        }));\n    }\n\n    return [];\n  } catch (error) {\n    console.error(\"연관어 분석 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 키워드로 타임라인 뉴스 가져오기\n * @param keyword 검색할 키워드\n * @param size 가져올 뉴스 개수\n * @returns 타임라인으로 정렬된 뉴스 아이템 배열\n */\nexport const getKeywordTimeline = async (\n  keyword: string,\n  size: number = 30\n): Promise<NewsItem[]> => {\n  try {\n    // 최근 30일의 뉴스를 가져옴\n    const newsItems = await searchNewsByKeyword(keyword, 30);\n\n    // 날짜 기준으로 정렬\n    return newsItems\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n      .slice(0, size);\n  } catch (error) {\n    console.error(\"키워드 타임라인 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 오늘의 키워드(분야별 키워드) 가져오기\n * @returns 분야별 인기 키워드 목록\n */\nexport const getTodayKeywords = async () => {\n  try {\n    const response = await bigKindsAPI.post(\"/today_category_keyword\", {\n      argument: {},\n    });\n\n    if (response.data && response.data.return_object) {\n      // 키워드와 카테고리 데이터 반환\n      return {\n        date: response.data.return_object.date,\n        categories: response.data.return_object.cate_ratio || [],\n        keywords: response.data.return_object.cate_keyword || [],\n      };\n    }\n\n    return {\n      date: \"\",\n      categories: [],\n      keywords: [],\n    };\n  } catch (error) {\n    console.error(\"오늘의 키워드 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 키워드 트렌드 정보 가져오기\n * @param keyword 검색 키워드\n * @param interval 집계 간격 (day, month, year)\n * @param fromDate 시작 날짜\n * @param toDate 종료 날짜\n * @returns 기간별 키워드 언급 추이\n */\nexport const getKeywordTrend = async (\n  keyword: string,\n  interval: \"day\" | \"month\" | \"year\" = \"month\",\n  fromDate?: Date,\n  toDate?: Date\n) => {\n  try {\n    // 날짜 범위 설정\n    const endDate = toDate || new Date();\n    const startDate = fromDate || new Date(endDate);\n\n    if (!fromDate) {\n      // 기본값으로 1년 전\n      startDate.setFullYear(startDate.getFullYear() - 1);\n    }\n\n    const response = await bigKindsAPI.post(\"/time_line\", {\n      argument: {\n        query: keyword,\n        published_at: {\n          from: formatDateForAPI(startDate),\n          until: formatDateForAPI(endDate),\n        },\n        provider: [SEOUL_ECONOMY_CODE],\n        interval: interval,\n        normalize: \"false\",\n      },\n    });\n\n    if (response.data && response.data.return_object) {\n      return {\n        totalHits: response.data.return_object.total_hits,\n        timeline: response.data.return_object.time_line || [],\n      };\n    }\n\n    return {\n      totalHits: 0,\n      timeline: [],\n    };\n  } catch (error) {\n    console.error(\"키워드 트렌드 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n// 날짜 포맷 유틸리티 (YYYY-MM-DD 형식)\nexport const formatDateForAPI = (\n  date: Date,\n  asYYYYMMDD: boolean = false\n): string => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n\n  if (asYYYYMMDD) {\n    return `${year}${month}${day}`;\n  }\n\n  return `${year}-${month}-${day}`;\n};\n\n// 읽기 쉬운 날짜 형식으로 변환\nexport const formatReadableDate = (dateString: string): string => {\n  if (!dateString) return \"\";\n\n  let date: Date;\n\n  // 다양한 날짜 형식 처리\n  if (dateString.match(/^\\d{8}$/)) {\n    // YYYYMMDD 형식\n    const year = dateString.substring(0, 4);\n    const month = dateString.substring(4, 6);\n    const day = dateString.substring(6, 8);\n    date = new Date(`${year}-${month}-${day}`);\n  } else {\n    // ISO 또는 다른 형식\n    date = new Date(dateString);\n  }\n\n  // 유효하지 않은 날짜\n  if (isNaN(date.getTime())) {\n    return dateString;\n  }\n\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n\n  return `${year}-${month}-${day}`;\n};\n\n// news_cluster ID를 직접 활용하여 뉴스 조회\nconst fetchNewsWithClusterIds = async (clusterIds: string[]) => {\n  const response = await bigKindsAPI.post(\"/search/news\", {\n    argument: {\n      news_ids: clusterIds,\n      fields: [\"news_id\", \"title\", \"content\", \"provider\", \"published_at\"],\n    },\n  });\n  return response.data?.return_object?.docs || [];\n};\n\n/**\n * 뉴스 ID에서 언론사 코드를 추출하여 언론사명 반환\n * @param newsId 뉴스 ID\n * @returns 언론사 이름\n */\nexport const getProviderFromNewsId = (newsId: string): string => {\n  const providerCode = newsId.split(\".\")[0];\n  return PROVIDER_CODES[providerCode] || `언론사코드(${providerCode})`;\n};\n\n/**\n * 뉴스가 서울경제 기사인지 확인\n * @param newsId 뉴스 ID\n * @returns boolean\n */\nexport const isSeoulEconomic = (newsId: string): boolean => {\n  return newsId.startsWith(\"02100311\");\n};\n\n/**\n * BigKinds 뉴스 상세 페이지 URL 생성\n * @param newsId 뉴스 ID\n * @returns URL 문자열\n */\nexport const generateBigkindsUrl = (newsId: string): string => {\n  const baseUrl =\n    \"https://www.bigkinds.or.kr/v2/news/newsDetailView.do?newsId=\";\n  return `${baseUrl}${newsId}`;\n};\n\n/**\n * 여러 뉴스 ID로 뉴스 상세 정보 가져오기\n * @param newsIds 뉴스 ID 배열\n * @returns 뉴스 상세 정보 배열\n */\nexport const getNewsDetailsByIds = async (\n  newsIds: string[]\n): Promise<any[]> => {\n  try {\n    if (!newsIds || newsIds.length === 0) {\n      return [];\n    }\n\n    const response = await bigKindsAPI.post(\"/search/news\", {\n      argument: {\n        news_ids: newsIds,\n        fields: [\n          \"title\",\n          \"content\",\n          \"published_at\",\n          \"provider\",\n          \"news_id\",\n          \"provider_link_page\",\n          \"images\",\n        ],\n      },\n    });\n\n    if (\n      response.data &&\n      response.data.return_object &&\n      response.data.return_object.docs\n    ) {\n      return response.data.return_object.docs.map((item: any) => ({\n        id: item.news_id,\n        title: item.title,\n        content: item.content ? item.content.substring(0, 150) + \"...\" : \"\",\n        date: formatReadableDate(item.published_at),\n        url: item.provider_link_page || generateBigkindsUrl(item.news_id),\n        imageUrl: item.images && item.images.length > 0 ? item.images[0] : null,\n        provider: getProviderFromNewsId(item.news_id),\n        providerCode: item.news_id.split(\".\")[0],\n        fullContent: item.content,\n      }));\n    }\n\n    return [];\n  } catch (error) {\n    console.error(\"뉴스 상세 정보 조회 중 오류 발생:\", error);\n    return [];\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}