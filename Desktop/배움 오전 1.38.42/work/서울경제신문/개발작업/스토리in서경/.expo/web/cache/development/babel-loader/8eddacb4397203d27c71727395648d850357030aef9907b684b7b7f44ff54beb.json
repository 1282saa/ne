{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from \"axios\";\nimport { BIGKINDS_KEY } from \"@env\";\nvar BASE_URL = \"https://tools.kinds.or.kr\";\nexport var bigKindsAPI = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  }\n});\nexport var SEOUL_ECONOMY_CODE = \"02100311\";\nbigKindsAPI.interceptors.request.use(function (config) {\n  if (config.data && !config.data.access_key) {\n    config.data = {\n      access_key: BIGKINDS_KEY,\n      argument: config.data.argument || config.data\n    };\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\nexport var searchNewsByKeyword = function () {\n  var _ref = _asyncToGenerator(function* (keyword) {\n    var days = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n    try {\n      var today = new Date();\n      var fromDate = new Date();\n      fromDate.setDate(today.getDate() - days);\n      var fromDateStr = formatDateForAPI(fromDate);\n      var toDateStr = formatDateForAPI(today);\n      var response = yield bigKindsAPI.post(\"/search/news\", {\n        argument: {\n          query: keyword,\n          published_at: {\n            from: fromDateStr,\n            until: toDateStr\n          },\n          provider: [SEOUL_ECONOMY_CODE],\n          sort: {\n            date: \"desc\"\n          },\n          return_from: 0,\n          return_size: 20,\n          fields: [\"title\", \"content\", \"published_at\", \"provider_news_id\", \"images\", \"provider_link_page\", \"provider\"]\n        }\n      });\n      if (response.data && response.data.documents) {\n        return response.data.documents.map(function (item) {\n          return {\n            id: item.news_id || item._id,\n            title: item.title,\n            description: item.content ? item.content.substring(0, 150) + \"...\" : \"\",\n            date: formatReadableDate(item.published_at),\n            url: item.provider_link_page,\n            imageUrl: item.images && item.images.length > 0 ? item.images[0] : null,\n            source: \"서울경제\"\n          };\n        });\n      }\n      return [];\n    } catch (error) {\n      console.error(\"뉴스 검색 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function searchNewsByKeyword(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getNewsDetail = function () {\n  var _ref2 = _asyncToGenerator(function* (newsId) {\n    try {\n      var response = yield bigKindsAPI.post(\"/search/news/detail\", {\n        argument: {\n          news_id: newsId,\n          fields: [\"title\", \"content\", \"published_at\", \"provider\", \"byline\", \"category\", \"images\", \"provider_link_page\"]\n        }\n      });\n      var detail = response.data.return_object;\n      return {\n        id: newsId,\n        title: detail.title,\n        content: detail.content,\n        date: formatReadableDate(detail.published_at),\n        url: detail.provider_link_page,\n        imageUrl: detail.images && detail.images.length > 0 ? detail.images[0] : null,\n        source: detail.provider || \"서울경제\",\n        author: detail.byline || \"\",\n        category: detail.category || []\n      };\n    } catch (error) {\n      console.error(\"뉴스 상세 정보 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getNewsDetail(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getTodayIssueNews = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n    try {\n      var today = new Date();\n      var dateStr = formatDateForAPI(today, true);\n      var response = yield bigKindsAPI.post(\"/issue_ranking\", {\n        argument: {\n          date: dateStr,\n          provider: [SEOUL_ECONOMY_CODE],\n          size: size\n        }\n      });\n      if (!response.data.return_object || response.data.return_object.length === 0) {\n        return [];\n      }\n      var newsPromises = response.data.return_object.map(function () {\n        var _ref4 = _asyncToGenerator(function* (issue) {\n          try {\n            var keyword = issue.topic_keyword || issue.topic;\n            var newsResponse = yield bigKindsAPI.post(\"/search/news\", {\n              argument: {\n                query: keyword,\n                published_at: {\n                  from: formatDateForAPI(new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000)),\n                  until: formatDateForAPI(today)\n                },\n                provider: [SEOUL_ECONOMY_CODE],\n                return_from: 0,\n                return_size: 1,\n                fields: [\"title\", \"content\", \"published_at\", \"provider_news_id\", \"images\", \"provider_link_page\"]\n              }\n            });\n            if (newsResponse.data.documents && newsResponse.data.documents.length > 0) {\n              var news = newsResponse.data.documents[0];\n              return {\n                id: news.news_id || news._id,\n                title: news.title,\n                description: news.content ? news.content.substring(0, 150) + \"...\" : \"\",\n                date: formatReadableDate(news.published_at),\n                url: news.provider_link_page,\n                imageUrl: news.images && news.images.length > 0 ? news.images[0] : null,\n                source: \"서울경제\"\n              };\n            }\n            return null;\n          } catch (error) {\n            console.error(\"이슈 관련 뉴스 검색 중 오류:\", error);\n            return null;\n          }\n        });\n        return function (_x3) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n      var newsResults = yield Promise.all(newsPromises);\n      return newsResults.filter(function (news) {\n        return news !== null;\n      });\n    } catch (error) {\n      console.error(\"오늘의 이슈 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getTodayIssueNews() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getPopularKeywords = function () {\n  var _ref5 = _asyncToGenerator(function* () {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    try {\n      var today = new Date();\n      var yesterday = new Date(today);\n      yesterday.setDate(today.getDate() - 1);\n      var response = yield bigKindsAPI.post(\"/query_rank\", {\n        argument: {\n          from: formatDateForAPI(yesterday),\n          until: formatDateForAPI(today),\n          offset: size\n        }\n      });\n      if (response.data.return_object && response.data.return_object.queries) {\n        return response.data.return_object.queries.sort(function (a, b) {\n          return b.count - a.count;\n        }).slice(0, size).map(function (item) {\n          return item.query;\n        });\n      }\n      return [];\n    } catch (error) {\n      console.error(\"인기 검색어 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getPopularKeywords() {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getRelatedKeywords = function () {\n  var _ref6 = _asyncToGenerator(function* (keyword) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    try {\n      var today = new Date();\n      var lastMonth = new Date(today);\n      lastMonth.setMonth(today.getMonth() - 1);\n      var response = yield bigKindsAPI.post(\"/word_cloud\", {\n        argument: {\n          query: keyword,\n          published_at: {\n            from: formatDateForAPI(lastMonth),\n            until: formatDateForAPI(today)\n          },\n          provider: [SEOUL_ECONOMY_CODE]\n        }\n      });\n      if (response.data.return_object && response.data.return_object.nodes) {\n        return response.data.return_object.nodes.sort(function (a, b) {\n          return b.weight - a.weight;\n        }).slice(0, size).map(function (node) {\n          return {\n            name: node.name,\n            weight: node.weight\n          };\n        });\n      }\n      return [];\n    } catch (error) {\n      console.error(\"연관어 분석 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getRelatedKeywords(_x4) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var getKeywordTimeline = function () {\n  var _ref7 = _asyncToGenerator(function* (keyword) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n    try {\n      var newsItems = yield searchNewsByKeyword(keyword, 30);\n      return newsItems.sort(function (a, b) {\n        return new Date(b.date).getTime() - new Date(a.date).getTime();\n      }).slice(0, size);\n    } catch (error) {\n      console.error(\"키워드 타임라인 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getKeywordTimeline(_x5) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var formatDateForAPI = function formatDateForAPI(date) {\n  var asYYYYMMDD = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var year = date.getFullYear();\n  var month = String(date.getMonth() + 1).padStart(2, \"0\");\n  var day = String(date.getDate()).padStart(2, \"0\");\n  if (asYYYYMMDD) {\n    return `${year}${month}${day}`;\n  }\n  return `${year}-${month}-${day}`;\n};\nexport var formatReadableDate = function formatReadableDate(dateString) {\n  if (!dateString) return \"\";\n  var date;\n  if (dateString.match(/^\\d{8}$/)) {\n    var _year = dateString.substring(0, 4);\n    var _month = dateString.substring(4, 6);\n    var _day = dateString.substring(6, 8);\n    date = new Date(`${_year}-${_month}-${_day}`);\n  } else {\n    date = new Date(dateString);\n  }\n  if (isNaN(date.getTime())) {\n    return dateString;\n  }\n  var year = date.getFullYear();\n  var month = String(date.getMonth() + 1).padStart(2, \"0\");\n  var day = String(date.getDate()).padStart(2, \"0\");\n  return `${year}-${month}-${day}`;\n};","map":{"version":3,"names":["axios","BIGKINDS_KEY","BASE_URL","bigKindsAPI","create","baseURL","headers","Accept","SEOUL_ECONOMY_CODE","interceptors","request","use","config","data","access_key","argument","error","Promise","reject","searchNewsByKeyword","_ref","_asyncToGenerator","keyword","days","arguments","length","undefined","today","Date","fromDate","setDate","getDate","fromDateStr","formatDateForAPI","toDateStr","response","post","query","published_at","from","until","provider","sort","date","return_from","return_size","fields","documents","map","item","id","news_id","_id","title","description","content","substring","formatReadableDate","url","provider_link_page","imageUrl","images","source","console","_x","apply","getNewsDetail","_ref2","newsId","detail","return_object","author","byline","category","_x2","getTodayIssueNews","_ref3","size","dateStr","newsPromises","_ref4","issue","topic_keyword","topic","newsResponse","getTime","news","_x3","newsResults","all","filter","getPopularKeywords","_ref5","yesterday","offset","queries","a","b","count","slice","getRelatedKeywords","_ref6","lastMonth","setMonth","getMonth","nodes","weight","node","name","_x4","getKeywordTimeline","_ref7","newsItems","_x5","asYYYYMMDD","year","getFullYear","month","String","padStart","day","dateString","match","isNaN"],"sources":["/Users/yeong-gwang/Desktop/배움 오전 1.38.42/work/서울경제신문/개발작업/스토리in서경/src/services/newsService.ts"],"sourcesContent":["import axios from \"axios\";\nimport { BIGKINDS_KEY } from \"@env\";\n\n// BigKinds API 기본 URL\nconst BASE_URL = \"https://tools.kinds.or.kr\";\n\n// API 클라이언트 설정\nexport const bigKindsAPI = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  },\n});\n\n// 서울경제신문 언론사 코드\nexport const SEOUL_ECONOMY_CODE = \"02100311\";\n\n// 요청 인터셉터 설정 - API 키 추가\nbigKindsAPI.interceptors.request.use(\n  (config) => {\n    // 요청 구조에 access_key 추가\n    if (config.data && !config.data.access_key) {\n      config.data = {\n        access_key: BIGKINDS_KEY,\n        argument: config.data.argument || config.data,\n      };\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 뉴스 검색 결과 인터페이스\nexport interface NewsItem {\n  id: string;\n  title: string;\n  description: string;\n  date: string;\n  url: string;\n  imageUrl?: string;\n  source?: string;\n}\n\n// 뉴스 상세 정보 인터페이스\nexport interface NewsDetail {\n  id: string;\n  title: string;\n  content: string;\n  date: string;\n  url: string;\n  imageUrl?: string;\n  source?: string;\n  author?: string;\n  category?: string[];\n}\n\n/**\n * 키워드로 뉴스 검색\n * @param keyword 검색 키워드\n * @returns 뉴스 아이템 배열\n */\nexport const searchNewsByKeyword = async (\n  keyword: string,\n  days: number = 30\n): Promise<NewsItem[]> => {\n  try {\n    // 날짜 범위 계산\n    const today = new Date();\n    const fromDate = new Date();\n    fromDate.setDate(today.getDate() - days);\n\n    const fromDateStr = formatDateForAPI(fromDate);\n    const toDateStr = formatDateForAPI(today);\n\n    const response = await bigKindsAPI.post(\"/search/news\", {\n      argument: {\n        query: keyword,\n        published_at: {\n          from: fromDateStr,\n          until: toDateStr,\n        },\n        provider: [SEOUL_ECONOMY_CODE], // 서울경제 언론사만 검색\n        sort: { date: \"desc\" },\n        return_from: 0,\n        return_size: 20,\n        fields: [\n          \"title\",\n          \"content\",\n          \"published_at\",\n          \"provider_news_id\",\n          \"images\",\n          \"provider_link_page\",\n          \"provider\",\n        ],\n      },\n    });\n\n    // 응답 데이터 확인 및 매핑\n    if (response.data && response.data.documents) {\n      return response.data.documents.map((item: any) => ({\n        id: item.news_id || item._id,\n        title: item.title,\n        description: item.content ? item.content.substring(0, 150) + \"...\" : \"\",\n        date: formatReadableDate(item.published_at),\n        url: item.provider_link_page,\n        imageUrl: item.images && item.images.length > 0 ? item.images[0] : null,\n        source: \"서울경제\",\n      }));\n    }\n\n    return [];\n  } catch (error) {\n    console.error(\"뉴스 검색 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 뉴스 상세 정보 조회\n * @param newsId 뉴스 ID\n * @returns 뉴스 상세 정보\n */\nexport const getNewsDetail = async (newsId: string): Promise<NewsDetail> => {\n  try {\n    const response = await bigKindsAPI.post(\"/search/news/detail\", {\n      argument: {\n        news_id: newsId,\n        fields: [\n          \"title\",\n          \"content\",\n          \"published_at\",\n          \"provider\",\n          \"byline\",\n          \"category\",\n          \"images\",\n          \"provider_link_page\",\n        ],\n      },\n    });\n\n    const detail = response.data.return_object;\n    return {\n      id: newsId,\n      title: detail.title,\n      content: detail.content,\n      date: formatReadableDate(detail.published_at),\n      url: detail.provider_link_page,\n      imageUrl:\n        detail.images && detail.images.length > 0 ? detail.images[0] : null,\n      source: detail.provider || \"서울경제\",\n      author: detail.byline || \"\",\n      category: detail.category || [],\n    };\n  } catch (error) {\n    console.error(\"뉴스 상세 정보 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 오늘의 이슈 뉴스 가져오기\n * @param size 가져올 이슈 수\n * @returns 뉴스 아이템 배열\n */\nexport const getTodayIssueNews = async (\n  size: number = 5\n): Promise<NewsItem[]> => {\n  try {\n    // 오늘 날짜 YYYYMMDD 형식\n    const today = new Date();\n    const dateStr = formatDateForAPI(today, true);\n\n    // 오늘의 이슈 요청\n    const response = await bigKindsAPI.post(\"/issue_ranking\", {\n      argument: {\n        date: dateStr,\n        provider: [SEOUL_ECONOMY_CODE],\n        size: size,\n      },\n    });\n\n    // 이슈가 있는지 확인\n    if (\n      !response.data.return_object ||\n      response.data.return_object.length === 0\n    ) {\n      return [];\n    }\n\n    // 각 이슈에 대한 첫 번째 뉴스 가져오기\n    const newsPromises = response.data.return_object.map(async (issue: any) => {\n      try {\n        // 이슈 관련 키워드로 뉴스 검색\n        const keyword = issue.topic_keyword || issue.topic;\n        const newsResponse = await bigKindsAPI.post(\"/search/news\", {\n          argument: {\n            query: keyword,\n            published_at: {\n              from: formatDateForAPI(\n                new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000)\n              ),\n              until: formatDateForAPI(today),\n            },\n            provider: [SEOUL_ECONOMY_CODE],\n            return_from: 0,\n            return_size: 1,\n            fields: [\n              \"title\",\n              \"content\",\n              \"published_at\",\n              \"provider_news_id\",\n              \"images\",\n              \"provider_link_page\",\n            ],\n          },\n        });\n\n        if (\n          newsResponse.data.documents &&\n          newsResponse.data.documents.length > 0\n        ) {\n          const news = newsResponse.data.documents[0];\n          return {\n            id: news.news_id || news._id,\n            title: news.title,\n            description: news.content\n              ? news.content.substring(0, 150) + \"...\"\n              : \"\",\n            date: formatReadableDate(news.published_at),\n            url: news.provider_link_page,\n            imageUrl:\n              news.images && news.images.length > 0 ? news.images[0] : null,\n            source: \"서울경제\",\n          };\n        }\n        return null;\n      } catch (error) {\n        console.error(\"이슈 관련 뉴스 검색 중 오류:\", error);\n        return null;\n      }\n    });\n\n    const newsResults = await Promise.all(newsPromises);\n    return newsResults.filter((news): news is NewsItem => news !== null);\n  } catch (error) {\n    console.error(\"오늘의 이슈 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 인기 검색어 가져오기\n * @param size 가져올 검색어 수\n * @returns 인기 검색어 배열\n */\nexport const getPopularKeywords = async (\n  size: number = 10\n): Promise<string[]> => {\n  try {\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(today.getDate() - 1);\n\n    const response = await bigKindsAPI.post(\"/query_rank\", {\n      argument: {\n        from: formatDateForAPI(yesterday),\n        until: formatDateForAPI(today),\n        offset: size,\n      },\n    });\n\n    if (response.data.return_object && response.data.return_object.queries) {\n      return response.data.return_object.queries\n        .sort((a: any, b: any) => b.count - a.count)\n        .slice(0, size)\n        .map((item: any) => item.query);\n    }\n\n    return [];\n  } catch (error) {\n    console.error(\"인기 검색어 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 연관어 분석 가져오기\n * @param keyword 검색 키워드\n * @param size 가져올 연관어 수\n * @returns 연관어 배열 {name: string, weight: number}\n */\nexport const getRelatedKeywords = async (\n  keyword: string,\n  size: number = 10\n) => {\n  try {\n    const today = new Date();\n    const lastMonth = new Date(today);\n    lastMonth.setMonth(today.getMonth() - 1);\n\n    const response = await bigKindsAPI.post(\"/word_cloud\", {\n      argument: {\n        query: keyword,\n        published_at: {\n          from: formatDateForAPI(lastMonth),\n          until: formatDateForAPI(today),\n        },\n        provider: [SEOUL_ECONOMY_CODE],\n      },\n    });\n\n    if (response.data.return_object && response.data.return_object.nodes) {\n      return response.data.return_object.nodes\n        .sort((a: any, b: any) => b.weight - a.weight)\n        .slice(0, size)\n        .map((node: any) => ({\n          name: node.name,\n          weight: node.weight,\n        }));\n    }\n\n    return [];\n  } catch (error) {\n    console.error(\"연관어 분석 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 키워드로 타임라인 뉴스 가져오기\n * @param keyword 검색할 키워드\n * @param size 가져올 뉴스 개수\n * @returns 타임라인으로 정렬된 뉴스 아이템 배열\n */\nexport const getKeywordTimeline = async (\n  keyword: string,\n  size: number = 30\n): Promise<NewsItem[]> => {\n  try {\n    // 최근 30일의 뉴스를 가져옴\n    const newsItems = await searchNewsByKeyword(keyword, 30);\n\n    // 날짜 기준으로 정렬\n    return newsItems\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n      .slice(0, size);\n  } catch (error) {\n    console.error(\"키워드 타임라인 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n// 날짜 포맷 유틸리티 (YYYY-MM-DD 형식)\nexport const formatDateForAPI = (\n  date: Date,\n  asYYYYMMDD: boolean = false\n): string => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n\n  if (asYYYYMMDD) {\n    return `${year}${month}${day}`;\n  }\n\n  return `${year}-${month}-${day}`;\n};\n\n// 읽기 쉬운 날짜 형식으로 변환\nexport const formatReadableDate = (dateString: string): string => {\n  if (!dateString) return \"\";\n\n  let date: Date;\n\n  // 다양한 날짜 형식 처리\n  if (dateString.match(/^\\d{8}$/)) {\n    // YYYYMMDD 형식\n    const year = dateString.substring(0, 4);\n    const month = dateString.substring(4, 6);\n    const day = dateString.substring(6, 8);\n    date = new Date(`${year}-${month}-${day}`);\n  } else {\n    // ISO 또는 다른 형식\n    date = new Date(dateString);\n  }\n\n  // 유효하지 않은 날짜\n  if (isNaN(date.getTime())) {\n    return dateString;\n  }\n\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n\n  return `${year}-${month}-${day}`;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}