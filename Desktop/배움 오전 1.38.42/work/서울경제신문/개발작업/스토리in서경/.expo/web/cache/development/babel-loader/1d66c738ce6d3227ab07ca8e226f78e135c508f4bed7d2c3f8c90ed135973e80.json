{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from \"axios\";\nimport { BIGKINDS_KEY } from \"@env\";\nvar BASE_URL = \"https://tools.kinds.or.kr\";\nexport var bigKindsAPI = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  }\n});\nexport var SEOUL_ECONOMY_CODE = \"02100311\";\nbigKindsAPI.interceptors.request.use(function (config) {\n  if (config.data && !config.data.access_key) {\n    config.data = {\n      access_key: BIGKINDS_KEY,\n      argument: config.data.argument || config.data\n    };\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\nexport var searchNewsByKeyword = function () {\n  var _ref = _asyncToGenerator(function* (keyword) {\n    var days = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n    try {\n      var today = new Date();\n      var fromDate = new Date();\n      fromDate.setDate(today.getDate() - days);\n      var fromDateStr = formatDateForAPI(fromDate);\n      var toDateStr = formatDateForAPI(today);\n      var response = yield bigKindsAPI.post(\"/search/news\", {\n        argument: {\n          query: keyword,\n          published_at: {\n            from: fromDateStr,\n            until: toDateStr\n          },\n          provider: [SEOUL_ECONOMY_CODE],\n          sort: {\n            date: \"desc\"\n          },\n          return_from: 0,\n          return_size: 20,\n          fields: [\"title\", \"content\", \"published_at\", \"provider_news_id\", \"images\", \"provider_link_page\", \"provider\"]\n        }\n      });\n      if (response.data && response.data.documents) {\n        return response.data.documents.map(function (item) {\n          return {\n            id: item.news_id || item._id,\n            title: item.title,\n            description: item.content ? item.content.substring(0, 150) + \"...\" : \"\",\n            date: formatReadableDate(item.published_at),\n            url: item.provider_link_page,\n            imageUrl: item.images && item.images.length > 0 ? item.images[0] : null,\n            source: \"서울경제\"\n          };\n        });\n      }\n      return [];\n    } catch (error) {\n      console.error(\"뉴스 검색 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function searchNewsByKeyword(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getNewsDetail = function () {\n  var _ref2 = _asyncToGenerator(function* (newsId) {\n    try {\n      var response = yield bigKindsAPI.post(\"/search/news\", {\n        argument: {\n          news_ids: [newsId],\n          fields: [\"title\", \"content\", \"published_at\", \"provider\", \"byline\", \"category\", \"images\", \"provider_link_page\"]\n        }\n      });\n      if (response.data && response.data.return_object && response.data.return_object.documents && response.data.return_object.documents.length > 0) {\n        var detail = response.data.return_object.documents[0];\n        return {\n          id: newsId,\n          title: detail.title,\n          content: detail.content,\n          date: formatReadableDate(detail.published_at),\n          url: detail.provider_link_page,\n          imageUrl: detail.images && detail.images.length > 0 ? detail.images[0] : null,\n          source: detail.provider || \"서울경제\",\n          author: detail.byline || \"\",\n          category: detail.category || []\n        };\n      }\n      throw new Error(\"뉴스 상세 정보를 찾을 수 없습니다.\");\n    } catch (error) {\n      console.error(\"뉴스 상세 정보 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getNewsDetail(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getTodayIssueNews = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n    try {\n      var today = new Date();\n      var dateStr = formatDateForAPI(today, true);\n      console.log(`오늘의 이슈 API 호출: ${dateStr}`);\n      var response = yield bigKindsAPI.post(\"/issue_ranking\", {\n        argument: {\n          date: dateStr,\n          provider: [SEOUL_ECONOMY_CODE],\n          size: size\n        }\n      });\n      console.log(\"API 응답:\", JSON.stringify(response.data, null, 2));\n      if (!response.data.return_object || !response.data.return_object.topics || response.data.return_object.topics.length === 0) {\n        console.log(\"오늘의 이슈 없음\");\n        return [];\n      }\n      var newsPromises = response.data.return_object.topics.map(function () {\n        var _ref4 = _asyncToGenerator(function* (issue) {\n          try {\n            var keyword = issue.topic_keyword || issue.topic;\n            console.log(`이슈 키워드: ${keyword}`);\n            var newsResponse = yield bigKindsAPI.post(\"/search/news\", {\n              argument: {\n                query: keyword,\n                published_at: {\n                  from: formatDateForAPI(new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000)),\n                  until: formatDateForAPI(today)\n                },\n                provider: [SEOUL_ECONOMY_CODE],\n                return_from: 0,\n                return_size: 1,\n                fields: [\"title\", \"content\", \"published_at\", \"provider_news_id\", \"images\", \"provider_link_page\"]\n              }\n            });\n            if (newsResponse.data && newsResponse.data.return_object && newsResponse.data.return_object.documents && newsResponse.data.return_object.documents.length > 0) {\n              var news = newsResponse.data.return_object.documents[0];\n              return {\n                id: news.news_id || news._id,\n                title: news.title,\n                description: news.content ? news.content.substring(0, 150) + \"...\" : \"\",\n                date: formatReadableDate(news.published_at),\n                url: news.provider_link_page,\n                imageUrl: news.images && news.images.length > 0 ? news.images[0] : null,\n                source: \"서울경제\"\n              };\n            }\n            console.log(\"이슈 관련 뉴스 없음\");\n            return null;\n          } catch (error) {\n            console.error(\"이슈 관련 뉴스 검색 중 오류:\", error);\n            return null;\n          }\n        });\n        return function (_x3) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n      var newsResults = yield Promise.all(newsPromises);\n      var filteredResults = newsResults.filter(function (news) {\n        return news !== null;\n      });\n      console.log(`최종 이슈 뉴스 개수: ${filteredResults.length}`);\n      return filteredResults;\n    } catch (error) {\n      console.error(\"오늘의 이슈 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getTodayIssueNews() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getPopularKeywords = function () {\n  var _ref5 = _asyncToGenerator(function* () {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    try {\n      var today = new Date();\n      var yesterday = new Date(today);\n      yesterday.setDate(today.getDate() - 1);\n      var response = yield bigKindsAPI.post(\"/query_rank\", {\n        argument: {\n          from: formatDateForAPI(yesterday),\n          until: formatDateForAPI(today),\n          offset: size\n        }\n      });\n      if (response.data.return_object && response.data.return_object.queries) {\n        return response.data.return_object.queries.sort(function (a, b) {\n          return b.count - a.count;\n        }).slice(0, size).map(function (item) {\n          return item.query;\n        });\n      }\n      return [];\n    } catch (error) {\n      console.error(\"인기 검색어 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getPopularKeywords() {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getRelatedKeywords = function () {\n  var _ref6 = _asyncToGenerator(function* (keyword) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    try {\n      var today = new Date();\n      var lastMonth = new Date(today);\n      lastMonth.setMonth(today.getMonth() - 1);\n      var response = yield bigKindsAPI.post(\"/word_cloud\", {\n        argument: {\n          query: keyword,\n          published_at: {\n            from: formatDateForAPI(lastMonth),\n            until: formatDateForAPI(today)\n          },\n          provider: [SEOUL_ECONOMY_CODE]\n        }\n      });\n      if (response.data.return_object && response.data.return_object.nodes) {\n        return response.data.return_object.nodes.sort(function (a, b) {\n          return b.weight - a.weight;\n        }).slice(0, size).map(function (node) {\n          return {\n            name: node.name,\n            weight: node.weight\n          };\n        });\n      }\n      return [];\n    } catch (error) {\n      console.error(\"연관어 분석 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getRelatedKeywords(_x4) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var getKeywordTimeline = function () {\n  var _ref7 = _asyncToGenerator(function* (keyword) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n    try {\n      var newsItems = yield searchNewsByKeyword(keyword, 30);\n      return newsItems.sort(function (a, b) {\n        return new Date(b.date).getTime() - new Date(a.date).getTime();\n      }).slice(0, size);\n    } catch (error) {\n      console.error(\"키워드 타임라인 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getKeywordTimeline(_x5) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var getTodayKeywords = function () {\n  var _ref8 = _asyncToGenerator(function* () {\n    try {\n      var response = yield bigKindsAPI.post(\"/today_category_keyword\", {\n        argument: {}\n      });\n      if (response.data && response.data.return_object) {\n        return {\n          date: response.data.return_object.date,\n          categories: response.data.return_object.cate_ratio || [],\n          keywords: response.data.return_object.cate_keyword || []\n        };\n      }\n      return {\n        date: \"\",\n        categories: [],\n        keywords: []\n      };\n    } catch (error) {\n      console.error(\"오늘의 키워드 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getTodayKeywords() {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var getKeywordTrend = function () {\n  var _ref9 = _asyncToGenerator(function* (keyword) {\n    var interval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"month\";\n    var fromDate = arguments.length > 2 ? arguments[2] : undefined;\n    var toDate = arguments.length > 3 ? arguments[3] : undefined;\n    try {\n      var endDate = toDate || new Date();\n      var startDate = fromDate || new Date(endDate);\n      if (!fromDate) {\n        startDate.setFullYear(startDate.getFullYear() - 1);\n      }\n      var response = yield bigKindsAPI.post(\"/time_line\", {\n        argument: {\n          query: keyword,\n          published_at: {\n            from: formatDateForAPI(startDate),\n            until: formatDateForAPI(endDate)\n          },\n          provider: [SEOUL_ECONOMY_CODE],\n          interval: interval,\n          normalize: \"false\"\n        }\n      });\n      if (response.data && response.data.return_object) {\n        return {\n          totalHits: response.data.return_object.total_hits,\n          timeline: response.data.return_object.time_line || []\n        };\n      }\n      return {\n        totalHits: 0,\n        timeline: []\n      };\n    } catch (error) {\n      console.error(\"키워드 트렌드 조회 중 오류 발생:\", error);\n      throw error;\n    }\n  });\n  return function getKeywordTrend(_x6) {\n    return _ref9.apply(this, arguments);\n  };\n}();\nexport var formatDateForAPI = function formatDateForAPI(date) {\n  var asYYYYMMDD = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var year = date.getFullYear();\n  var month = String(date.getMonth() + 1).padStart(2, \"0\");\n  var day = String(date.getDate()).padStart(2, \"0\");\n  if (asYYYYMMDD) {\n    return `${year}${month}${day}`;\n  }\n  return `${year}-${month}-${day}`;\n};\nexport var formatReadableDate = function formatReadableDate(dateString) {\n  if (!dateString) return \"\";\n  var date;\n  if (dateString.match(/^\\d{8}$/)) {\n    var _year = dateString.substring(0, 4);\n    var _month = dateString.substring(4, 6);\n    var _day = dateString.substring(6, 8);\n    date = new Date(`${_year}-${_month}-${_day}`);\n  } else {\n    date = new Date(dateString);\n  }\n  if (isNaN(date.getTime())) {\n    return dateString;\n  }\n  var year = date.getFullYear();\n  var month = String(date.getMonth() + 1).padStart(2, \"0\");\n  var day = String(date.getDate()).padStart(2, \"0\");\n  return `${year}-${month}-${day}`;\n};","map":{"version":3,"names":["axios","BIGKINDS_KEY","BASE_URL","bigKindsAPI","create","baseURL","headers","Accept","SEOUL_ECONOMY_CODE","interceptors","request","use","config","data","access_key","argument","error","Promise","reject","searchNewsByKeyword","_ref","_asyncToGenerator","keyword","days","arguments","length","undefined","today","Date","fromDate","setDate","getDate","fromDateStr","formatDateForAPI","toDateStr","response","post","query","published_at","from","until","provider","sort","date","return_from","return_size","fields","documents","map","item","id","news_id","_id","title","description","content","substring","formatReadableDate","url","provider_link_page","imageUrl","images","source","console","_x","apply","getNewsDetail","_ref2","newsId","news_ids","return_object","detail","author","byline","category","Error","_x2","getTodayIssueNews","_ref3","size","dateStr","log","JSON","stringify","topics","newsPromises","_ref4","issue","topic_keyword","topic","newsResponse","getTime","news","_x3","newsResults","all","filteredResults","filter","getPopularKeywords","_ref5","yesterday","offset","queries","a","b","count","slice","getRelatedKeywords","_ref6","lastMonth","setMonth","getMonth","nodes","weight","node","name","_x4","getKeywordTimeline","_ref7","newsItems","_x5","getTodayKeywords","_ref8","categories","cate_ratio","keywords","cate_keyword","getKeywordTrend","_ref9","interval","toDate","endDate","startDate","setFullYear","getFullYear","normalize","totalHits","total_hits","timeline","time_line","_x6","asYYYYMMDD","year","month","String","padStart","day","dateString","match","isNaN"],"sources":["/Users/yeong-gwang/Desktop/배움 오전 1.38.42/work/서울경제신문/개발작업/스토리in서경/src/services/newsService.ts"],"sourcesContent":["import axios from \"axios\";\nimport { BIGKINDS_KEY } from \"@env\";\n\n// BigKinds API 기본 URL\nconst BASE_URL = \"https://tools.kinds.or.kr\";\n\n// API 클라이언트 설정\nexport const bigKindsAPI = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  },\n});\n\n// 서울경제신문 언론사 코드\nexport const SEOUL_ECONOMY_CODE = \"02100311\";\n\n// 요청 인터셉터 설정 - API 키 추가\nbigKindsAPI.interceptors.request.use(\n  (config) => {\n    // 요청 구조에 access_key 추가\n    if (config.data && !config.data.access_key) {\n      config.data = {\n        access_key: BIGKINDS_KEY,\n        argument: config.data.argument || config.data,\n      };\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 뉴스 검색 결과 인터페이스\nexport interface NewsItem {\n  id: string;\n  title: string;\n  description: string;\n  date: string;\n  url: string;\n  imageUrl?: string;\n  source?: string;\n}\n\n// 뉴스 상세 정보 인터페이스\nexport interface NewsDetail {\n  id: string;\n  title: string;\n  content: string;\n  date: string;\n  url: string;\n  imageUrl?: string;\n  source?: string;\n  author?: string;\n  category?: string[];\n}\n\n/**\n * 키워드로 뉴스 검색\n * @param keyword 검색 키워드\n * @returns 뉴스 아이템 배열\n */\nexport const searchNewsByKeyword = async (\n  keyword: string,\n  days: number = 30\n): Promise<NewsItem[]> => {\n  try {\n    // 날짜 범위 계산\n    const today = new Date();\n    const fromDate = new Date();\n    fromDate.setDate(today.getDate() - days);\n\n    const fromDateStr = formatDateForAPI(fromDate);\n    const toDateStr = formatDateForAPI(today);\n\n    const response = await bigKindsAPI.post(\"/search/news\", {\n      argument: {\n        query: keyword,\n        published_at: {\n          from: fromDateStr,\n          until: toDateStr,\n        },\n        provider: [SEOUL_ECONOMY_CODE], // 서울경제 언론사만 검색\n        sort: { date: \"desc\" },\n        return_from: 0,\n        return_size: 20,\n        fields: [\n          \"title\",\n          \"content\",\n          \"published_at\",\n          \"provider_news_id\",\n          \"images\",\n          \"provider_link_page\",\n          \"provider\",\n        ],\n      },\n    });\n\n    // 응답 데이터 확인 및 매핑\n    if (response.data && response.data.documents) {\n      return response.data.documents.map((item: any) => ({\n        id: item.news_id || item._id,\n        title: item.title,\n        description: item.content ? item.content.substring(0, 150) + \"...\" : \"\",\n        date: formatReadableDate(item.published_at),\n        url: item.provider_link_page,\n        imageUrl: item.images && item.images.length > 0 ? item.images[0] : null,\n        source: \"서울경제\",\n      }));\n    }\n\n    return [];\n  } catch (error) {\n    console.error(\"뉴스 검색 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 뉴스 상세 정보 조회\n * @param newsId 뉴스 ID\n * @returns 뉴스 상세 정보\n */\nexport const getNewsDetail = async (newsId: string): Promise<NewsDetail> => {\n  try {\n    const response = await bigKindsAPI.post(\"/search/news\", {\n      argument: {\n        news_ids: [newsId],\n        fields: [\n          \"title\",\n          \"content\",\n          \"published_at\",\n          \"provider\",\n          \"byline\",\n          \"category\",\n          \"images\",\n          \"provider_link_page\",\n        ],\n      },\n    });\n\n    // 응답 구조가 다르므로 적절히 처리\n    if (\n      response.data &&\n      response.data.return_object &&\n      response.data.return_object.documents &&\n      response.data.return_object.documents.length > 0\n    ) {\n      const detail = response.data.return_object.documents[0];\n      return {\n        id: newsId,\n        title: detail.title,\n        content: detail.content,\n        date: formatReadableDate(detail.published_at),\n        url: detail.provider_link_page,\n        imageUrl:\n          detail.images && detail.images.length > 0 ? detail.images[0] : null,\n        source: detail.provider || \"서울경제\",\n        author: detail.byline || \"\",\n        category: detail.category || [],\n      };\n    }\n\n    throw new Error(\"뉴스 상세 정보를 찾을 수 없습니다.\");\n  } catch (error) {\n    console.error(\"뉴스 상세 정보 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 오늘의 이슈 뉴스 가져오기\n * @param size 가져올 이슈 수\n * @returns 뉴스 아이템 배열\n */\nexport const getTodayIssueNews = async (\n  size: number = 5\n): Promise<NewsItem[]> => {\n  try {\n    // 오늘 날짜 YYYYMMDD 형식\n    const today = new Date();\n    const dateStr = formatDateForAPI(today, true);\n\n    console.log(`오늘의 이슈 API 호출: ${dateStr}`); // 디버깅 로그 추가\n\n    // 오늘의 이슈 요청\n    const response = await bigKindsAPI.post(\"/issue_ranking\", {\n      argument: {\n        date: dateStr,\n        provider: [SEOUL_ECONOMY_CODE],\n        size: size,\n      },\n    });\n\n    console.log(\"API 응답:\", JSON.stringify(response.data, null, 2)); // 디버깅을 위해 응답 로깅\n\n    // 이슈가 있는지 확인 - 수정된 부분\n    if (\n      !response.data.return_object ||\n      !response.data.return_object.topics ||\n      response.data.return_object.topics.length === 0\n    ) {\n      console.log(\"오늘의 이슈 없음\");\n      return [];\n    }\n\n    // 각 이슈에 대한 첫 번째 뉴스 가져오기 - topics 배열 사용\n    const newsPromises = response.data.return_object.topics.map(\n      async (issue: any) => {\n        try {\n          // 이슈 관련 키워드로 뉴스 검색\n          const keyword = issue.topic_keyword || issue.topic;\n          console.log(`이슈 키워드: ${keyword}`); // 디버깅 로그 추가\n\n          const newsResponse = await bigKindsAPI.post(\"/search/news\", {\n            argument: {\n              query: keyword,\n              published_at: {\n                from: formatDateForAPI(\n                  new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000)\n                ),\n                until: formatDateForAPI(today),\n              },\n              provider: [SEOUL_ECONOMY_CODE],\n              return_from: 0,\n              return_size: 1,\n              fields: [\n                \"title\",\n                \"content\",\n                \"published_at\",\n                \"provider_news_id\",\n                \"images\",\n                \"provider_link_page\",\n              ],\n            },\n          });\n\n          // 응답에서 documents 확인 - 수정된 부분\n          if (\n            newsResponse.data &&\n            newsResponse.data.return_object &&\n            newsResponse.data.return_object.documents &&\n            newsResponse.data.return_object.documents.length > 0\n          ) {\n            const news = newsResponse.data.return_object.documents[0];\n            return {\n              id: news.news_id || news._id,\n              title: news.title,\n              description: news.content\n                ? news.content.substring(0, 150) + \"...\"\n                : \"\",\n              date: formatReadableDate(news.published_at),\n              url: news.provider_link_page,\n              imageUrl:\n                news.images && news.images.length > 0 ? news.images[0] : null,\n              source: \"서울경제\",\n            };\n          }\n          console.log(\"이슈 관련 뉴스 없음\");\n          return null;\n        } catch (error) {\n          console.error(\"이슈 관련 뉴스 검색 중 오류:\", error);\n          return null;\n        }\n      }\n    );\n\n    const newsResults = await Promise.all(newsPromises);\n    const filteredResults = newsResults.filter(\n      (news): news is NewsItem => news !== null\n    );\n    console.log(`최종 이슈 뉴스 개수: ${filteredResults.length}`);\n    return filteredResults;\n  } catch (error) {\n    console.error(\"오늘의 이슈 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 인기 검색어 가져오기\n * @param size 가져올 검색어 수\n * @returns 인기 검색어 배열\n */\nexport const getPopularKeywords = async (\n  size: number = 10\n): Promise<string[]> => {\n  try {\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(today.getDate() - 1);\n\n    const response = await bigKindsAPI.post(\"/query_rank\", {\n      argument: {\n        from: formatDateForAPI(yesterday),\n        until: formatDateForAPI(today),\n        offset: size,\n      },\n    });\n\n    if (response.data.return_object && response.data.return_object.queries) {\n      return response.data.return_object.queries\n        .sort((a: any, b: any) => b.count - a.count)\n        .slice(0, size)\n        .map((item: any) => item.query);\n    }\n\n    return [];\n  } catch (error) {\n    console.error(\"인기 검색어 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 연관어 분석 가져오기\n * @param keyword 검색 키워드\n * @param size 가져올 연관어 수\n * @returns 연관어 배열 {name: string, weight: number}\n */\nexport const getRelatedKeywords = async (\n  keyword: string,\n  size: number = 10\n) => {\n  try {\n    const today = new Date();\n    const lastMonth = new Date(today);\n    lastMonth.setMonth(today.getMonth() - 1);\n\n    const response = await bigKindsAPI.post(\"/word_cloud\", {\n      argument: {\n        query: keyword,\n        published_at: {\n          from: formatDateForAPI(lastMonth),\n          until: formatDateForAPI(today),\n        },\n        provider: [SEOUL_ECONOMY_CODE],\n      },\n    });\n\n    if (response.data.return_object && response.data.return_object.nodes) {\n      return response.data.return_object.nodes\n        .sort((a: any, b: any) => b.weight - a.weight)\n        .slice(0, size)\n        .map((node: any) => ({\n          name: node.name,\n          weight: node.weight,\n        }));\n    }\n\n    return [];\n  } catch (error) {\n    console.error(\"연관어 분석 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 키워드로 타임라인 뉴스 가져오기\n * @param keyword 검색할 키워드\n * @param size 가져올 뉴스 개수\n * @returns 타임라인으로 정렬된 뉴스 아이템 배열\n */\nexport const getKeywordTimeline = async (\n  keyword: string,\n  size: number = 30\n): Promise<NewsItem[]> => {\n  try {\n    // 최근 30일의 뉴스를 가져옴\n    const newsItems = await searchNewsByKeyword(keyword, 30);\n\n    // 날짜 기준으로 정렬\n    return newsItems\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n      .slice(0, size);\n  } catch (error) {\n    console.error(\"키워드 타임라인 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 오늘의 키워드(분야별 키워드) 가져오기\n * @returns 분야별 인기 키워드 목록\n */\nexport const getTodayKeywords = async () => {\n  try {\n    const response = await bigKindsAPI.post(\"/today_category_keyword\", {\n      argument: {},\n    });\n\n    if (response.data && response.data.return_object) {\n      // 키워드와 카테고리 데이터 반환\n      return {\n        date: response.data.return_object.date,\n        categories: response.data.return_object.cate_ratio || [],\n        keywords: response.data.return_object.cate_keyword || [],\n      };\n    }\n\n    return {\n      date: \"\",\n      categories: [],\n      keywords: [],\n    };\n  } catch (error) {\n    console.error(\"오늘의 키워드 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n/**\n * 키워드 트렌드 정보 가져오기\n * @param keyword 검색 키워드\n * @param interval 집계 간격 (day, month, year)\n * @param fromDate 시작 날짜\n * @param toDate 종료 날짜\n * @returns 기간별 키워드 언급 추이\n */\nexport const getKeywordTrend = async (\n  keyword: string,\n  interval: \"day\" | \"month\" | \"year\" = \"month\",\n  fromDate?: Date,\n  toDate?: Date\n) => {\n  try {\n    // 날짜 범위 설정\n    const endDate = toDate || new Date();\n    const startDate = fromDate || new Date(endDate);\n\n    if (!fromDate) {\n      // 기본값으로 1년 전\n      startDate.setFullYear(startDate.getFullYear() - 1);\n    }\n\n    const response = await bigKindsAPI.post(\"/time_line\", {\n      argument: {\n        query: keyword,\n        published_at: {\n          from: formatDateForAPI(startDate),\n          until: formatDateForAPI(endDate),\n        },\n        provider: [SEOUL_ECONOMY_CODE],\n        interval: interval,\n        normalize: \"false\",\n      },\n    });\n\n    if (response.data && response.data.return_object) {\n      return {\n        totalHits: response.data.return_object.total_hits,\n        timeline: response.data.return_object.time_line || [],\n      };\n    }\n\n    return {\n      totalHits: 0,\n      timeline: [],\n    };\n  } catch (error) {\n    console.error(\"키워드 트렌드 조회 중 오류 발생:\", error);\n    throw error;\n  }\n};\n\n// 날짜 포맷 유틸리티 (YYYY-MM-DD 형식)\nexport const formatDateForAPI = (\n  date: Date,\n  asYYYYMMDD: boolean = false\n): string => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n\n  if (asYYYYMMDD) {\n    return `${year}${month}${day}`;\n  }\n\n  return `${year}-${month}-${day}`;\n};\n\n// 읽기 쉬운 날짜 형식으로 변환\nexport const formatReadableDate = (dateString: string): string => {\n  if (!dateString) return \"\";\n\n  let date: Date;\n\n  // 다양한 날짜 형식 처리\n  if (dateString.match(/^\\d{8}$/)) {\n    // YYYYMMDD 형식\n    const year = dateString.substring(0, 4);\n    const month = dateString.substring(4, 6);\n    const day = dateString.substring(6, 8);\n    date = new Date(`${year}-${month}-${day}`);\n  } else {\n    // ISO 또는 다른 형식\n    date = new Date(dateString);\n  }\n\n  // 유효하지 않은 날짜\n  if (isNaN(date.getTime())) {\n    return dateString;\n  }\n\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n\n  return `${year}-${month}-${day}`;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}