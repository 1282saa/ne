# 스토리IN서경 개발 보고서

## 1. 개요

본 보고서는 "스토리IN서경" 앱 개발 과정과 구조에 대한 상세 내용을 담고 있습니다. 이 문서는 프로젝트 인수인계 및 향후 개발 방향을 위해 작성되었습니다.

### 프로젝트 목적
- 뉴스를 이야기 형태로 구성하여 사용자가 이슈의 맥락을 파악할 수 있게 함
- 키워드 기반으로 관련 뉴스를 모아 스토리 형태로 제공
- 사용자 친화적인 모바일 앱 인터페이스 구현

## 2. 기술 스택

- **프론트엔드**: React Native (Expo)
- **언어**: TypeScript
- **상태 관리**: React Hooks
- **네비게이션**: React Navigation (Stack Navigator)
- **UI 컴포넌트**: React Native 기본 컴포넌트 + Expo Vector Icons
- **백엔드 연동**: 추후 Big Kinds API 연동 예정
- **AI 요약/맥락 생성**: 추후 OpenAI GPT API 연동 예정
- **데이터 저장**: AsyncStorage (로컬 저장소)

## 3. 프로젝트 구조

### 3.1 폴더 구조
```
스토리IN서경/
│
├── App.tsx                  # 앱 진입점 및 네비게이션 설정
├── app.json                 # Expo 앱 설정
│
├── src/
│   ├── screens/             # 화면 컴포넌트
│   │   ├── HomeScreen.tsx            # 홈 화면 (키워드 검색)
│   │   ├── StoryResultScreen.tsx     # 스토리 결과 화면
│   │   ├── NewsDetailScreen.tsx      # 뉴스 상세 화면
│   │   ├── AspenHomeScreen.tsx       # 디자인 샘플 - 홈
│   │   └── AspenDetailScreen.tsx     # 디자인 샘플 - 상세
│   │
│   ├── types/               # TypeScript 타입 정의
│   │   └── navigation.ts    # 네비게이션 타입 정의
│   │
│   ├── services/            # 예정된 API 서비스 (추후 구현)
│   │   ├── api.ts                # API 클라이언트 설정 (axios 등)
│   │   ├── newsService.ts        # 뉴스 데이터 관련 API 서비스
│   │   └── aiService.ts          # AI 요약/맥락 생성 API 서비스
│   ├── components/          # 예정된 재사용 컴포넌트 (추후 구현)
│   ├── hooks/               # 예정된 커스텀 훅 (추후 구현)
│   └── utils/               # 예정된 유틸리티 함수 (추후 구현)
│
├── assets/                  # 정적 자원 (현재 비어있음)
    ├── images/              # 이미지 파일 위치 (추후 추가)
    └── fonts/               # 폰트 파일 위치 (추후 추가)
```

### 3.2 네비게이션 흐름
- 앱은 React Navigation의 Stack Navigator를 사용하여 화면 간 이동을 관리
- 기본 네비게이션 흐름: Home → StoryResult → NewsDetail
- 디자인 샘플 네비게이션 흐름: Home → AspenHome → AspenDetail

### 3.3 주요 화면 설명

#### HomeScreen.tsx
- 키워드 검색 기능
- 추천 키워드 목록
- 샘플 디자인 화면으로 이동하는 카드 제공
- 최근 검색어 기능 구현 예정 (AsyncStorage 사용)
- 케로셀 기능 추가

#### StoryResultScreen.tsx
- 검색 키워드에 대한 스토리를 카드 형식으로 표시
- 가로 스와이프로 카드 간 이동 가능
- 각 카드에는 제목, 날짜, 요약, 맥락 정보 포함
- 공유 기능 및 상세 보기 기능

#### NewsDetailScreen.tsx
- 뉴스 상세 콘텐츠 표시
- 현재는 모의 데이터 사용, 추후 실제 뉴스 콘텐츠 연동 예정
- 공유 기능 및 원본 기사 연결 기능

#### AspenHomeScreen.tsx / AspenDetailScreen.tsx
- Figma의 Anima 플러그인에서 생성된 디자인 샘플 화면
- 실제 앱 UI 개발에 참고용으로 사용

## 4. 구현 상세

### 4.1 네비게이션 타입 정의
```typescript
// src/types/navigation.ts
export type RootStackParamList = {
  Home: undefined;
  StoryResult: { keyword: string };
  NewsDetail: { url: string, title: string };
  AspenHome: undefined;
  AspenDetail: undefined;
};
```

### 4.2 홈 화면 구현
- 키워드 입력 필드 및 검색 버튼
- 추천 키워드 버튼 (클릭 시 해당 키워드로 검색)
- 디자인 샘플 화면으로 이동하는 카드
- 케로셀 기능 추가

### 4.3 스토리 결과 화면 구현
- 가로 스크롤 뷰를 사용한 카드 스와이프 인터페이스
- 페이지 인디케이터로 현재 위치 표시
- 검색 키워드를 기반으로 모의 데이터 생성 (추후 실제 API 연동)

### 4.4 뉴스 상세 화면 구현
- 뉴스 제목, 날짜, 콘텐츠 표시
- 공유 기능 및 원본 기사 링크

### 4.5 도전 과제 및 해결책
- **폰트 로딩 문제**: 실제 폰트 파일 없이 앱을 실행하기 위해 폰트 로딩 코드 주석 처리, 시스템 기본 폰트로 대체
- **이미지 로딩 문제**: 실제 이미지 파일 없이 앱을 실행하기 위해 이미지 임포트 코드 주석 처리, 색상 배경으로 대체
- **웹 호환성**: 웹에서도 앱이 정상 작동하도록 특정 네이티브 전용 기능 사용 제한

## 5. 향후 개발 계획

### 5.1 단기 목표
1. **폰트 및 이미지 추가**
   - `assets/fonts` 폴더에 필요한 폰트 파일 추가
   - `assets/images` 폴더에 필요한 이미지 파일 추가
   - 폰트 로딩 코드 활성화 및 이미지 임포트 코드 활성화

2. **Big Kinds API 연동**
   - 실제 뉴스 데이터를 가져오는 API 서비스 구현
   - 키워드 검색 결과를 실제 뉴스 데이터로 표시

3. **AsyncStorage 구현**
   - 검색 기록 저장 및 불러오기 기능 완성
   - 사용자 설정 저장 기능 추가

### 5.2 중기 목표
1. **AI 요약/맥락 생성**
   - OpenAI GPT API 연동
   - 뉴스 콘텐츠 요약 및 맥락 생성 알고리즘 개발

2. **UI/UX 개선**
   - 애니메이션 및 전환 효과 추가
   - 다크 모드 지원
   - 접근성 개선

3. **성능 최적화**
   - 이미지 캐싱 구현
   - 리스트 렌더링 최적화
   - API 호출 캐싱 및 최적화

### 5.3 장기 목표
1. **개인화 기능**
   - 사용자 관심 키워드 설정
   - 알림 기능 추가
   - 맞춤형 콘텐츠 추천

2. **소셜 기능**
   - 스토리 공유 최적화
   - 댓글 및 토론 기능
   - 사용자 간 콘텐츠 추천

3. **분석 및 인사이트**
   - 뉴스 트렌드 분석
   - 시각화 도구 추가
   - 감정 분석 및 뉴스 성향 표시

## 6. 개발 환경 및 실행 방법

### 6.1 필수 설치 항목
- Node.js (16.x 이상)
- npm 또는 yarn
- Expo CLI (`npm install -g expo-cli`)
- Android Studio (안드로이드 개발 시)
- Xcode (iOS 개발 시, Mac 필요)

### 6.2 프로젝트 설정
```bash
# 프로젝트 폴더로 이동
cd 스토리IN서경

# 필요한 패키지 설치
npm install
```

### 6.3 앱 실행
```bash
# Expo 개발 서버 실행
npx expo start

# 웹 환경에서 실행
# 터미널에서 'w' 키 누르기

# iOS 시뮬레이터에서 실행 (Mac 필요)
# 터미널에서 'i' 키 누르기

# Android 에뮬레이터에서 실행
# 터미널에서 'a' 키 누르기

# 실제 기기에서 실행
# Expo Go 앱으로 터미널에 표시된 QR 코드 스캔
```

## 7. 유지보수 가이드

### 7.1 코드 스타일
- TypeScript 타입 정의 철저히 사용
- 컴포넌트는 함수형 컴포넌트로 작성
- React Hooks 활용 (특히 useState, useEffect)
- StyleSheet로 스타일 정의, 인라인 스타일 지양

### 7.2 오류 처리
- try-catch 블록으로 API 호출 오류 처리
- 로딩 상태 및 오류 상태 명확히 표시
- 콘솔 로그 대신 적절한 오류 메시지 표시

### 7.3 테스트
- 주요 기능에 대한 단위 테스트 작성 (Jest 활용 예정)
- 다양한 기기 및 화면 크기에서 UI 테스트
- 네트워크 불안정 상황 대응 테스트

## 8. 결론

"스토리IN서경" 프로젝트는 뉴스 소비 방식을 혁신하고자 하는 비전을 가지고 있습니다. 현재 기본적인 UI 구조와 화면 간 이동 흐름이 구현되어 있으며, 향후 실제 API 연동과 기능 확장을 통해 완성도를 높여나갈 예정입니다.

특히 AI를 활용한 뉴스 요약 및 맥락 생성 기능은 이 앱의 핵심 차별점이 될 것이며, 사용자가 복잡한 뉴스 이슈를 쉽게 이해할 수 있도록 도울 것입니다.

개발팀은 이 문서를 기반으로 앱의 비전을 함께 실현해 나가길 바랍니다.

---

**작성일**: 2023년 9월
**버전**: 1.0.0
**담당자**: [개발자 이름]